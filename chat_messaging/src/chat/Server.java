/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;

import java.net.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Luano Zubém
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    static ServerSocket server;
    static Socket socketClient;
    
    //fluxos
    static DataInputStream fluxoDeEntrada;
    static DataOutputStream fluxoDeSaida;
    
    //Oque vai ser enviado e o que vai ser recebido :|
    static String msgAserRecebida, msgAserEnviada;
    
    //Tempo
    static Date tempo = new Date();
    static SimpleDateFormat formatarHora = new SimpleDateFormat("hh:mm:ss");
    static String horaFormatada;
    
    //Emojis
    String smile = "☺";
    String heart = "♥";
    
    
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        emoji_smile = new javax.swing.JLabel();
        emoji_heart = new javax.swing.JLabel();
        btn_alert = new javax.swing.JLabel();
        btn_enviar = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        exibirMsg = new javax.swing.JTextArea();
        insiraTexto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("server_application");
        setAutoRequestFocus(false);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/icons/bate-papo.png")).getImage());
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Emojis");

        emoji_smile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sorrir.png"))); // NOI18N
        emoji_smile.setToolTipText("Caso não queira pressionar este emoji, digite :) para obter resultado equivalente.");
        emoji_smile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        emoji_smile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emoji_smileMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                emoji_smileMouseExited(evt);
            }
        });

        emoji_heart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/heart.png"))); // NOI18N
        emoji_heart.setToolTipText("Caso não queira pressionar este emoji, digite <3 para obter resultado equivalente.");
        emoji_heart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        emoji_heart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emoji_heartMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                emoji_heartMouseExited(evt);
            }
        });

        btn_alert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mao.png"))); // NOI18N
        btn_alert.setToolTipText("Chama a atenção do cliente.");
        btn_alert.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_alert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_alertMouseClicked(evt);
            }
        });

        btn_enviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/enviar-mensagem.png"))); // NOI18N
        btn_enviar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_enviar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_enviarMouseClicked(evt);
            }
        });

        exibirMsg.setEditable(false);
        exibirMsg.setBackground(new java.awt.Color(0, 102, 102));
        exibirMsg.setColumns(20);
        exibirMsg.setFont(exibirMsg.getFont().deriveFont(exibirMsg.getFont().getStyle() | java.awt.Font.BOLD, exibirMsg.getFont().getSize()+1));
        exibirMsg.setForeground(new java.awt.Color(0, 51, 51));
        exibirMsg.setLineWrap(true);
        exibirMsg.setRows(5);
        exibirMsg.setTabSize(2);
        exibirMsg.setText("Aguardando mensagens do cliente\n...\n");
        exibirMsg.setToolTipText("mensagens recebidas do cliente serão exibidas aqui");
        exibirMsg.setWrapStyleWord(true);
        exibirMsg.setBorder(null);
        exibirMsg.setDisabledTextColor(new java.awt.Color(255, 0, 51));
        jScrollPane2.setViewportView(exibirMsg);

        insiraTexto.setBackground(new java.awt.Color(0, 102, 102));
        insiraTexto.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        insiraTexto.setForeground(new java.awt.Color(0, 51, 51));
        insiraTexto.setText("Digite aqui");
        insiraTexto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                insiraTextoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                insiraTextoFocusLost(evt);
            }
        });
        insiraTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                insiraTextoKeyPressed(evt);
            }
        });

        jLabel2.setText("Caso queira encerrar a comunicação digite: sair");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(insiraTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_enviar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(btn_alert))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(emoji_smile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(emoji_heart))
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_alert, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(btn_enviar, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(insiraTexto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emoji_smile)
                    .addComponent(emoji_heart))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 392, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void insiraTextoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_insiraTextoFocusLost
        //Insere um texto no campo ao se perder o foco.
        insiraTexto.setText("Digite aqui");
    }//GEN-LAST:event_insiraTextoFocusLost

    private void insiraTextoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_insiraTextoFocusGained
        //Insere um texto vazio no campo ao se ganhar foco.
        insiraTexto.setText("");
    }//GEN-LAST:event_insiraTextoFocusGained

    private void btn_enviarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_enviarMouseClicked
        //Bloco responsável pelo envio de dados ao cliente
        //tempo
        tempo = new Date();
        horaFormatada = formatarHora.format(tempo);
        msgAserEnviada = insiraTexto.getText();
        try {
            switch (msgAserEnviada) {
                case "sair":
                    //Alterando o background e o texto de alguns componentes
                    exibirMsg.setForeground(new java.awt.Color(0, 102, 102));
                    exibirMsg.setBackground(new java.awt.Color(0, 51, 51));
                    insiraTexto.setBackground(new java.awt.Color(0, 51, 51));
                    //Interrompimento da conexão
                    exibirMsg.setText("Você encerrou a conexão!");
                    fluxoDeSaida.writeUTF(msgAserEnviada);
                    server.close();
                    socketClient.close();
                    fluxoDeEntrada.close();
                    fluxoDeSaida.close();
                    break;
                case ":)":
                    //Caso o emoji smile seja enviado via terminal
                    fluxoDeSaida.writeUTF("\n"+horaFormatada+"_ SERVIDOR: "+smile);
                    exibirMsg.setText(exibirMsg.getText()+"\n"+horaFormatada+"_ EU: "+msgAserEnviada);
                    break;
                case "<3":
                    //Caso o emoji heart seja enviado via terminal
                    fluxoDeSaida.writeUTF("\n"+horaFormatada+"_ SERVIDOR: "+heart);
                    exibirMsg.setText(exibirMsg.getText()+"\n"+horaFormatada+"_ EU: "+msgAserEnviada);
                    break;
                default:
                    fluxoDeSaida.writeUTF("\n"+horaFormatada+"_ SERVIDOR: "+msgAserEnviada);
                    //Exibi oque foi enviado
                    exibirMsg.setText(exibirMsg.getText()+"\n"+horaFormatada+"_ EU: "+msgAserEnviada);
                    break;
            }
        } catch (IOException e) {
            exibirMsg.setText("Impossível enviar dados -----> "+e);
        }
    }//GEN-LAST:event_btn_enviarMouseClicked

    private void btn_alertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_alertMouseClicked
        //Bloco responsável pelo encaminhamento do alerta ao cliente
        try {
            fluxoDeSaida.writeUTF("alerta");
        } catch (IOException e) {
            exibirMsg.setText("Alerta não enviado -----> "+e);
        }
    }//GEN-LAST:event_btn_alertMouseClicked

    private void emoji_heartMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emoji_heartMouseExited
        emoji_heart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/heart.png")));
    }//GEN-LAST:event_emoji_heartMouseExited

    private void emoji_heartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emoji_heartMouseClicked
        //Emoji heart
        //tempo
        tempo = new Date();
        horaFormatada = formatarHora.format(tempo);
        emoji_heart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/heart_1.png")));
        try {
            fluxoDeSaida.writeUTF("\n"+horaFormatada+"_ SERVIDOR: "+heart);
            exibirMsg.setText(exibirMsg.getText()+"\n"+horaFormatada+"_ EU: "+heart);
        } catch (IOException e) {
            exibirMsg.setText("Error ao enviar emoji -----> "+e);
        }
    }//GEN-LAST:event_emoji_heartMouseClicked

    private void emoji_smileMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emoji_smileMouseExited
        emoji_smile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sorrir.png")));
    }//GEN-LAST:event_emoji_smileMouseExited

    private void emoji_smileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emoji_smileMouseClicked
        //Emoji smile
        //tempo
        tempo = new Date();
        horaFormatada = formatarHora.format(tempo);
        emoji_smile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sorrir_1.png")));
        try {
            fluxoDeSaida.writeUTF("\n"+horaFormatada+"_ SERVIDOR: "+smile);
            exibirMsg.setText(exibirMsg.getText()+"\n"+horaFormatada+"_ EU: "+smile);
        } catch (IOException e) {
            exibirMsg.setText("Error ao enviar emoji -----> "+e);
        }
    }//GEN-LAST:event_emoji_smileMouseClicked

    private void insiraTextoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_insiraTextoKeyPressed

    }//GEN-LAST:event_insiraTextoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Server().setVisible(true);
        });
        
        try {
            server = new ServerSocket(5050);
            socketClient = server.accept();
            
            fluxoDeEntrada = new DataInputStream(socketClient.getInputStream());
            fluxoDeSaida = new DataOutputStream(socketClient.getOutputStream());
            
            //Bloco responsável pelo recebimento de dados do cliente
            msgAserRecebida = "";
            while(!msgAserRecebida.equals("sair")){
                msgAserRecebida = fluxoDeEntrada.readUTF();
                switch (msgAserRecebida) {
                    case "sair":
                        //Alterando o background e o texto de alguns componentes
                        exibirMsg.setForeground(new java.awt.Color(0, 102, 102));
                        exibirMsg.setBackground(new java.awt.Color(0, 51, 51));
                        insiraTexto.setBackground(new java.awt.Color(0, 51, 51));
                        //Interrompimento da comunicação
                        exibirMsg.setText("Conexão encerrada pelo cliente!");
                        server.close();
                        socketClient.close();
                        fluxoDeEntrada.close();
                        fluxoDeSaida.close();
                        break;
                    case "alerta":
                        ExecutarAudio alerta = new ExecutarAudio();
                        alerta.setTitle("O cliente está acenando para você !");
                        break;
                    default:
                        exibirMsg.setText(exibirMsg.getText()+msgAserRecebida);
                        break;
                }
            }
            
        } catch (IOException e) {
            System.out.println("Erro em -----> "+e);
        }
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btn_alert;
    private javax.swing.JLabel btn_enviar;
    private javax.swing.JLabel emoji_heart;
    private javax.swing.JLabel emoji_smile;
    private static javax.swing.JTextArea exibirMsg;
    private static javax.swing.JTextField insiraTexto;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
